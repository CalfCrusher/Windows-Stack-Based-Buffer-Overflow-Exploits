1) We fuzz the application, check fuzzer.py. Take note at which bytes the application crash. 200 bytes
2) Now we generate a pattern: /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 200
3) Run fuzzer2.py and check if program crash again. Then type: !mona findmsp -distance 200. Check the offset of the EIP (146)
4) Run fuzzer3.py and check if we can find B char in EIP address. If so, we can go on.
5) Now before search the JMP address we need to find the bad chars. Check fuzzer4.py for the skeleton.
	In mona type: !mona bytearray -b "\x00" to generate a bad char list without \x00 like our list in skeleton
	Restart Immunity and run the vulnerable app again. Run the first cycle of fuzzer4.py then come back to Immunity: check the address to which the ESP register points and use it in  the following mona command:
	!mona compare -f bytearray.bin -a <address> (!mona compare -f bytearray.bin -a 009219E4)
	Take note of bad char list. Remove those char from fuzzer4.py, restart Immunity and repeat same process until mona will not find any bad char. Save those in a file like badchars_to_remove.txrt
6) Now we need to find a suitable JMP address. Still while Immunity is crashe we can type: !mona jmp -r esp -cpb "\x00\x0a" . I this case we found only 2 bad char and we need to specify.
	mona should returns some pointers suitable. That's our JMP address.
7) Compile the exploit, insert the JMP address reversed (little endiand format) and generate a shellcode without bad chars found.
8) Open a listener (if shellcode is a reverse shell), run the exploit and cross your fingers!
